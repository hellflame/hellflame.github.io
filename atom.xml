<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hellflame</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hellflame.github.io/"/>
  <updated>2021-05-24T00:27:10.825Z</updated>
  <id>https://hellflame.github.io/</id>
  
  <author>
    <name>hellflame</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈内卷</title>
    <link href="https://hellflame.github.io/2021/05/10/about-involution/"/>
    <id>https://hellflame.github.io/2021/05/10/about-involution/</id>
    <published>2021-05-10T00:29:11.000Z</published>
    <updated>2021-05-24T00:27:10.825Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在午饭期间刚好听到有人在谈论“内卷”的事情，稍微记录一下自己的感觉。</p><a id="more"></a><p>前段时间在午饭期间刚好听到有人在谈论“内卷”的事情，稍微记录一下自己的感觉。当然内卷并不是没有确切的定义，只是感觉那些谈论的人都有点对内卷的现象恨之入骨，但似乎又不得不卷入其中，充满了矛盾和无奈。</p><p>午饭期间他们刚好有人问起：“现在网上有个词很热，叫什么内卷，是什么意思呀？” 然后有人就开始了解答：“你去电影院看过电影吗？” “嗯” “当第一排的人站起来的时候，剩下的人是不是都不得不站起来才能看到电影呢？好了，这就是内卷。虽然他们最终都看到了电影，但是却比原来付出了更多的代价，甚至是不好的体验，但最终也不过是看到了一部电影，这就是内卷。”</p><p>不得不说这个说法很形象，让我至今还记得。大家切身参与着毫无意义的内耗，却又不得不参与，每个人都显得那么无辜，仿佛能看到噙着泪水在努力工作，却又不能改变现状的样子。但仔细想想同样的场景，是不是有很多眼熟的地方。</p><p>有一个年轻人A刚加入公司工作，每天比别人早到，比别人晚下班，终于完成了公司完整系统的构建上线。大家都称赞这个人年少有为，努力勤奋，是公司不可多得的人才，他得到了每一个人的夸奖和赞赏。这个时候，大家并不会说这个年轻人A被内卷了。大概是因为他改变了现状，突破了内卷的束缚，卷出来了，所以大家不会说年轻人A的努力不是无意义的内耗。</p><p>有一个年轻人B刚加入公司工作，每天比别人早到，比别人晚下班，但公司要求的项目却迟迟不能上线。大家都说年轻人B已经很努力了，大家应该体谅一下他每天努力工作的付出，没有功劳也有苦劳。这个时候，大家也不会说年轻人B陷入了内卷，大家的饭后谈资大概是，B真的太苦逼了，一个人承担那么大压力。虽然B在努力着，却没有让现状有明显的突破，但大家也没有说B被内卷了，大概是因为虽然他是电影院第一排站起来的人，但他身后并没有人，所以年轻人B没有卷入其他人。</p><p>有一个年轻人C刚加入公司工作，每天比别人早到，比别人晚下班，虽然公司要求的项目依然迟迟不能上线，但有一天，老板突然宣布公司要延长工作时间，大家都知道年轻人C比大家都辛苦，老板让加班也不得不加班。虽然大家嘴上不说什么，但一开始也没有什么大不了，项目的确也因为加班，正常上线了。这个时候大家大概也不会说这是内卷，毕竟项目正常上线了，甚至还有很多人因此拿到了奖金，皆大欢喜，老板甚至还表扬了年轻人C，说他为公司带来了新的活力。</p><p>有一个年轻人D刚加入公司工作，每天比别人早到，比别人晚下班，因为公司要求的项目迟迟不能上线，老板宣布公司要延长工作时间，但项目依然推迟了很久，迟迟不能上线。大概这就是一个标准的内卷，明明已经付出了更多的努力，却依然没办法突围。</p><p>有一个年轻人E刚加入公司工作，每天比别人早到，比别人晚下班，然后有员工开始站出来训斥年轻人E，“请立即停止你的**行为”，在有人开腔之后，大家都开始埋怨年轻人E，说他这种行为有可能导致大家被迫无意义的劳动，甚至开始在各种地方排挤年轻人E，都希望他能趁早离开公司。怎么说呢，大概这是一个标准的内卷预防机制，因为大家都知道这样下去必然会导致内卷，具体的坏处嘛，就是自己会被迫加班，加班了也不一定能完成任务，就像年轻人B一样，我们真正需要的是年轻人A，一个能挑大梁的人。还有，因为自己是被迫加班，会被领导表扬的肯定是年轻人E，剩下的人都有概率被打上不认真工作的标签，总之大概率是一件费力不讨好的事情。</p><p>真正有趣的其实是最后一种情况。发生在内卷前夜的故事，大家美好又平静的生活似乎就要被一个老板看起来很优秀的人打破了，但大家似乎都认为这不会让现状得到突破，甚至会导致自己的收益/付出比下降。努力奋斗和内卷似乎有着一条并不明朗的分界线，只有看得清全局的人才能分辨两者的区别，有的人认为自己能把握全局，所以及时出手制止了内卷的发生，有的人认为只有努力奋斗才能有更好的结果，所以表现的更受老板喜欢。</p><p>据说在那个物资匮乏的年代，大家都以拼命工作为荣，心里充满了无限的希望。然而在这个物欲横飞的时代，似乎有人已经认定了拼命工作是徒劳，因为大概拼一辈子命，也很难在北京内环或者上海浦东买一套房，但自己也没办法改变这种现状，于是把自己所处的境遇称为内卷。</p><p>然而随着各行各业竞争日趋激烈，每个行业内必然存在一部分群体处在无法突破现状的情况，这个时候需要的领导层能指出未来前进的方向，而不是任由手下的人在内耗中煎熬，他们并不会因为干着没有意义的事情而感到工作轻松。竞争变得越来越激烈大概是在参与某个行业的人越来越多的情况下必然会发生的情况，但竞争的方向和行业初心也是越来越偏离却也越来越远，这大概才是真正的内卷。不知道有多少人打着“消灭内卷”的旗号，消灭着更努力的人，其实正在把努力的人和无力的人都卷入其中。</p><p>想起小时候人们常说，不努力，什么都得不到，即便是再差的学生也是这么说，“现在努力一点，以后肯定会比保持现状得到的结果好很多”。如果按照内卷的说法，是不是应该劝差生早日放弃希望呢？大概在我能够真正掌握全局前，还是需要努力的吧，也许以后真的就掌握全局了呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在午饭期间刚好听到有人在谈论“内卷”的事情，稍微记录一下自己的感觉。&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang Argparse 开发记录</title>
    <link href="https://hellflame.github.io/2021/05/08/golang-argparse/"/>
    <id>https://hellflame.github.io/2021/05/08/golang-argparse/</id>
    <published>2021-05-08T14:19:35.000Z</published>
    <updated>2021-05-22T12:18:01.485Z</updated>
    
    <content type="html"><![CDATA[<p>在用了几个 <code>golang</code> 的命令行解析包之后，还是决定自己造一个轮子</p><a id="more"></a><p>在用了几个 <code>golang</code> 的命令行解析包之后，还是决定自己造一个轮子，仿照python版本的 <code>argparse</code>， 用来解析命令行</p><p>项目地址: <a href="https://github.com/hellflame/argparse" target="_blank" rel="noopener">https://github.com/hellflame/argparse</a></p><h3 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h3><p>命令行解析只有两个主要部分，一部分是和命令行参数相关的结构体，另一部分是关于命令行语义解析的方法。前者是命令行参数的承载体，后者是驱动解析进行下去的动力，也是人机交互的入口。即 <code>argparse</code> 被刚好分成 <code>arg</code> &amp; <code>parse</code> 两部分。</p><p>命令行参数的结构体作用比较简单，核心流程是<code>注册</code> -&gt; <code>遍历</code> -&gt; <code>解析</code> -&gt; <code>赋值</code> 。核心在于保管命令行解析结果的指针，用于返回命令行解析结果，其他的附属功能包括创建命令行、创建命令的正确性检查、解析命令行中字符串的值以及执行预设动作等。对应于 <code>argparse</code> 中的 <code>arg</code> 部分。</p><p>命令行的语义解析是项目中最复杂的部分，复杂程度大概是因为有一个大概6层的代码缩进和一个递归。虽然原理本身并不复杂，但需要同时处理 <code>位置参数</code>， <code>可选参数</code>， <code>标志参数</code>，<code>副命令</code> 以及处理解析过程中的异常情况，难免需要很多分支和循环，甚至递归。</p><h3 id="二、语义解析"><a href="#二、语义解析" class="headerlink" title="二、语义解析"></a>二、语义解析</h3><p>命令行的核心就是语义解析，就像一门编程语言中的令牌解析一样。这里采用了将命令行关键词提前注册，通过遍历命令行的形式来完成整个过程。</p><p><code>Parser</code> 结构体声明像这样:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Parser <span class="keyword">struct</span> &#123;</span><br><span class="line">name        <span class="keyword">string</span></span><br><span class="line">description <span class="keyword">string</span></span><br><span class="line">showHelp    *<span class="keyword">bool</span></span><br><span class="line">config      *ParserConfig</span><br><span class="line"></span><br><span class="line">entries      []*arg</span><br><span class="line">entryMap     <span class="keyword">map</span>[<span class="keyword">string</span>]*arg</span><br><span class="line">positionArgs []*arg</span><br><span class="line"></span><br><span class="line">entryGroupOrder []<span class="keyword">string</span></span><br><span class="line">entryGroup      <span class="keyword">map</span>[<span class="keyword">string</span>][]*arg</span><br><span class="line"></span><br><span class="line">subParser    []*Parser</span><br><span class="line">subParserMap <span class="keyword">map</span>[<span class="keyword">string</span>]*Parser</span><br><span class="line">parentList   []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体中除了 <code>name</code>, <code>description</code> 等基本设置之外，有两个位置无关的注册字典以及1个位置参数列表，分别如下:</p><ol><li><code>entryMap</code> 字典会保存位置参数，将类似 <code>-h</code> ，<code>--help</code> 的字符串作为 <code>key</code> , 与之对应的参数结构体实例作为 <code>value</code> ，对应的方法用来处理剩下来的参数</li><li><code>subParserMap</code> 字典会保存 <code>副命令</code> 参数，将类似 <code>test</code> ，<code>mod</code> 类似的副命令入口作为 <code>key</code> ，保存下另一个 <code>Parser</code> 实例，一个全新的解析环境</li><li><code>positionArgs</code> 列表会保存位置参数列表，比较特别的是这个列表内容的添加顺序就是位置参数的解析顺序，在实际解析的过程中需要保存位置参数的解析位置</li></ol><p>还有一个没有说的字典 <code>entryGroup</code>，这个字典主要保存命令行参数的分类信息，但因为参数的分组信息有保存在 <code>arg</code> 实例上，所以这算是一种冗余。这个字典主要是方便生成帮助信息，后续可以考虑去掉，在每次生成帮助信息的时候再构建分组信息。</p><p>在遍历用户输入参数的时候，需要一个参数一个参数的处理，决定对接下来的输入参数作何处理，以及接下来参数的位置 (这里说了两个 <code>参数</code>, 一个是用户输入的参数，如 <code>python entry.py --help --date 20210101</code>  中的 <code>--help --date 20210101</code> 都是用户输入的参数，一个是程序解析的参数，表示代码中的每一个 <code>arg</code> 实例)</p><p>针对可选参数，即 <code>entryMap</code> 里注册的参数，在匹配到参数时有三种处理接下来参数的情况，一种是不需要任何参数，即 <code>Flag</code> 类型的标志性参数，这种参数一旦出现，即表示 <code>true</code> ，比如 <code>--help</code> ；一种是只需要一个参数，即接受单个参数的可选参数，如 <code>--date 20210101</code> 中的 <code>--date</code> ，与之绑定的 <code>arg</code> 实例需要一个参数参与解析，得到结果，此时需要判断 <code>--date</code> 之后是否有需要的参数，如果没有，那么就是用户输入有误，如果有，那么尝试处理这个参数，并且将下一个即将解析的用户参数索引号更新到<code>20210101</code> 之后；最后一种是可以接受多个参数的可选参数，如 <code>--date-list 20210101 20200501</code> ，和前者除了将解析的用户参数索引更新到 <code>20200501</code>  之后外，基本一致。</p><p>在处理可选参数过程中，有可能遇到 <code>Flag</code> 类型后面还有额外的未注册参数，或者在只接受一个参数的可选参数获取一个参数之后依然有未注册参数，那么这个时候就要考虑这个多出来的值是否为 <code>位置参数</code> 了。位置参数也分为两种，一种仅接受一个参数作为值，一种则可接受多个值。对于位置参数，需要在解析时记录已经解析的位置参数，因为可能存在创建了多个位置参数的情况，甚至更复杂一点的创建了单参数位置参数+多参数位置参数的情况。</p><p>对于 <code>subParserMap</code> ，每次解析都需要判断第一个用户输入的参数是否在 <code>副命令</code> 注册表里存在，如果存在，那么剩下的参数都要用于副命令的参数解析。对的，这里需要用到递归，执行副命令的解析动作。</p><p>在每次解析动作的结尾，需要对以上提到的可选参数注册表以及位置参数列表进行便利，检查对 <code>Required</code> 的必填项是否已填以及 <code>Default</code> 默认参数的处理，还有副命令相关的 <code>Required</code> 和 <code>Default</code> 相关的检查和处理，反馈解析结果。</p><h3 id="三、参数解析"><a href="#三、参数解析" class="headerlink" title="三、参数解析"></a>三、参数解析</h3><p>参数解析主要就是对已经匹配到的用户输入参数处理并通过指针，一层层传递到用户创建这个参数的入口去。</p><p>相关结构体如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> arg <span class="keyword">struct</span> &#123;</span><br><span class="line">short    <span class="keyword">string</span></span><br><span class="line">full     <span class="keyword">string</span></span><br><span class="line">target   <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">assigned <span class="keyword">bool</span></span><br><span class="line">Option</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Option is the only type to config when creating argument</span></span><br><span class="line"><span class="keyword">type</span> Option <span class="keyword">struct</span> &#123;</span><br><span class="line">Meta       <span class="keyword">string</span> <span class="comment">// meta value for help/usage generate</span></span><br><span class="line">multi      <span class="keyword">bool</span> <span class="comment">// take more than one argument</span></span><br><span class="line">Default    <span class="keyword">string</span> <span class="comment">// default argument value if not given</span></span><br><span class="line">isFlag     <span class="keyword">bool</span> <span class="comment">// use as flag</span></span><br><span class="line">Required   <span class="keyword">bool</span> <span class="comment">// require to be set</span></span><br><span class="line">Positional <span class="keyword">bool</span> <span class="comment">// is positional argument</span></span><br><span class="line">Help       <span class="keyword">string</span> <span class="comment">// help message</span></span><br><span class="line">Group      <span class="keyword">string</span> <span class="comment">// argument group info, default to be no group</span></span><br><span class="line">Action     <span class="function"><span class="keyword">func</span><span class="params">(args []<span class="keyword">string</span>)</span> <span class="title">error</span> // <span class="title">bind</span> <span class="title">actions</span> <span class="title">when</span> <span class="title">the</span> <span class="title">match</span> <span class="title">is</span> <span class="title">found</span>, '<span class="title">args</span>' <span class="title">can</span> <span class="title">be</span> <span class="title">nil</span> <span class="title">to</span> <span class="title">be</span> <span class="title">a</span> <span class="title">flag</span></span></span><br><span class="line"><span class="function"><span class="title">Choices</span>    []<span class="title">interface</span></span>&#123;&#125; <span class="comment">// input argument must be one/some of the choice</span></span><br><span class="line">Validate   <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="keyword">string</span>)</span> <span class="title">error</span> // <span class="title">customize</span> <span class="title">function</span> <span class="title">to</span> <span class="title">check</span> <span class="title">argument</span> <span class="title">validation</span></span></span><br><span class="line"><span class="function"><span class="title">Formatter</span>  <span class="title">func</span><span class="params">(arg <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span> // <span class="title">format</span> <span class="title">input</span> <span class="title">arguments</span> <span class="title">by</span> <span class="title">the</span> <span class="title">given</span> <span class="title">method</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>针对参数处理，只要按照正确的流程进行即可，这里包括：</p><ol><li>标记已解析, <code>assigned = true</code></li><li>既定 <code>Action</code> 响应，一旦匹配，即返回执行结果</li><li><code>Flag</code> 类型立即绑定 <code>true</code> 并结束解析</li><li>如果该参数接受参数但无输入，并且存在默认值 <code>Default</code>，则将默认值添加到待解析参数中</li><li>如果存在 <code>Validate</code>，则通过该函数依次判断每一个待解析参数的有效性</li><li>如果存在 <code>Formatter</code>，则依次通过该函数依次处理每一个待解析参数，否则按照绑定参数的类型处理每一个待解析参数，如字符串转换为 <code>Int</code> 或 <code>Float32</code> 类型等</li><li>如果存在 <code>Choices</code> ，则依次检查上一步处理好的参数是否都在 <code>Choice</code> 中存在，否则提示用户输入有误</li><li>通过指针传递已解析的结果到创建参数的入口</li></ol><p>以上流程对应 <code>func (a *arg) parseValue(values []string) error</code> 这个方法的实现过程</p><h3 id="四、最后亿点点"><a href="#四、最后亿点点" class="headerlink" title="四、最后亿点点"></a>四、最后亿点点</h3><p>有一些小细节的处理：</p><ol><li>帮助信息中对每一个参数的帮助说明换行缩进处理</li><li>创建参数时的名称有效性判定，包括名称的有效性和矛盾检查</li><li><code>interface</code> 指针传值时的类型转换</li><li><code>metavar</code> 支持</li><li>帮助信息的出现时机判定，甚至是否出现</li><li>帮助信息 <code>Flag</code> 的注册</li><li>自定义的使用缩略和自动生成的使用缩略</li><li>单元测试 + 覆盖率</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用了几个 &lt;code&gt;golang&lt;/code&gt; 的命令行解析包之后，还是决定自己造一个轮子&lt;/p&gt;
    
    </summary>
    
      <category term="basics" scheme="https://hellflame.github.io/categories/basics/"/>
    
    
      <category term="golang" scheme="https://hellflame.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>bash常用命令集锦</title>
    <link href="https://hellflame.github.io/2021/01/01/bash-command-summary/"/>
    <id>https://hellflame.github.io/2021/01/01/bash-command-summary/</id>
    <published>2021-01-01T02:27:26.000Z</published>
    <updated>2021-01-11T16:04:58.236Z</updated>
    
    <content type="html"><![CDATA[<p>我不是命令的生产者，我只是命令的搬运工</p><a id="more"></a><p>以下主要用 <code>bash</code> 作为终端实例</p><h3 id="一-shell-配置"><a href="#一-shell-配置" class="headerlink" title="一. shell 配置"></a>一. shell 配置</h3><h4 id="1-输入提示-prompt"><a href="#1-输入提示-prompt" class="headerlink" title="1. 输入提示 (prompt)"></a>1. 输入提示 (prompt)</h4><p>指的是在未输入任何命令时在终端开头的提示，可以展示当前的用户、时间、当前工作目录，甚至 <code>git</code> 状态。每执行完一个命令或函数之后会更新提示</p><p>输入提示由 bash 的环境变量 <code>PS1</code> 决定，最简单的修改方式如：</p><p><code>PS1=&#39;[\t] \W &#39;</code></p><p>提示就会变成类似这样</p><p><code>[10:52:12] ~</code></p><p>还有更高端的<a href="https://github.com/twolfson/sexy-bash-prompt" target="_blank" rel="noopener">github上的配置</a>，自己的配置就是基于这个版本的修改版</p><h4 id="2-命令自动补全"><a href="#2-命令自动补全" class="headerlink" title="2. 命令自动补全"></a>2. 命令自动补全</h4><p>随着系统的使用时间越来越长，免不了会装各种命令程序，最终可能会有成千上万的可执行命令，如果不是常用命令，很难一次就输入正确，虽然也比较浪费时间，所以一个命令补全显得十分有必要</p><p>大多数linux的发行版本里都会有最基本的命令补全，当在命令行输入 <code>ls</code> 时，按下两次 <code>tab</code> ，应该会得到以下输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">ls         lsappinfo  lsbom      lskq       lsm        lsmp       lsof       lsvfs</span><br></pre></td></tr></table></figure><p>会在下一行开始，显示出所有以 <code>ls</code> 开头的命令</p><p>当输入的长度对应的可选命令只有一个候选时，按下一次 <code>tab</code> 即可完全补全命令，如果侯选命令都有比输入更长的相同开头，一次 <code>tab</code> 会补全到那个更长的开头</p><p>比如候选命令包括</p><p><code>abc abd abe</code></p><p>那么输入 <code>a</code> 后一次 <code>tab</code> 即可补全到 <code>ab</code></p><p>当然还有命令级别的自动补全，比如 <code>apt</code> , <code>npm</code> , <code>pip</code> 这些命令都是提供了参数级别的自动补全，不过需要配置就是了，比如需要安装 <code>bash-completion</code>，然后将对应的补全脚本放在合适的地方，补全脚本可能是原本在安装软件的时候提供的，程序自己也可以提供这样的补全脚本，提示用户放在正确的位置。</p><p>比如执行 <code>npm completion</code> ，会输出补全脚本，其中注释里会提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># npm command completion script</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Installation: npm completion &gt;&gt; ~/.bashrc  (or ~/.zshrc)</span></span><br><span class="line"><span class="comment"># Or, maybe: npm completion &gt; /usr/local/etc/bash_completion.d/npm</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这些补全脚本可以极大的提高命令使用的舒适度</p><blockquote><p>自动补全大小写忽略</p></blockquote><p>如果有时候命令或者参数里包含大写的字符，可能输入会麻烦一点，所以可以进一步偷懒</p><p>执行 <code>echo &#39;set completion-ignore-case on&#39; &gt;&gt; ~/.inputrc</code> 即可，在下一次开启bash实例的时候就会生效，多用在自动匹配文件名上</p><h4 id="3-bash启动提示"><a href="#3-bash启动提示" class="headerlink" title="3. bash启动提示"></a>3. bash启动提示</h4><p>即在每次开启bash时输出的提示，类似这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> _______________________________________</span><br><span class="line">/ Martin was probably ripping them off. \</span><br><span class="line">| That<span class="string">'s some family, isn'</span>t it? Incest, |</span><br><span class="line">| prostitution, fanaticism, software.   |</span><br><span class="line">|                                       |</span><br><span class="line">\ -- Charles Willeford, <span class="string">"Miami Blues"</span>   /</span><br><span class="line"> ---------------------------------------</span><br><span class="line">  \                                  ,+*^^*+___+++_</span><br><span class="line">   \                           ,*^^^^              )</span><br><span class="line">    \                       _+*                     ^**+_</span><br><span class="line">     \                    +^       _ _++*+_+++_,         )</span><br><span class="line">              _+^^*+_    (     ,+*^ ^          \+_        )</span><br><span class="line">             &#123;       )  (    ,(    ,_+--+--,      ^)      ^\</span><br><span class="line">            &#123; (@)    &#125; f   ,(  ,+-^ __*_*_  ^^\_   ^\       )</span><br><span class="line">           &#123;:;-/    (_+*-+^^^^^+*+*&lt;_ _++_)_    )    )      /</span><br><span class="line">          ( /  (    (        ,___    ^*+_+* )   &lt;    &lt;      \</span><br><span class="line">           U _/     )    *--&lt;  ) ^\-----++__)   )    )       )</span><br><span class="line">            (      )  _(^)^^))  )  )\^^^^^))^*+/    /       /</span><br><span class="line">          (      /  (_))_^)) )  )  ))^^^^^))^^^)__/     +^^</span><br><span class="line">         (     ,/    (^))^))  )  ) ))^^^^^^^))^^)       _)</span><br><span class="line">          *+__+*       (_))^)  ) ) ))^^^^^^))^^^^^)____*^</span><br><span class="line">          \             \_)^)_)) ))^^^^^^^^^^))^^^^)</span><br><span class="line">           (_             ^\__^^^^^^^^^^^^))^^^^^^^)</span><br><span class="line">             ^\___            ^\__^^^^^^))^^^^^^^^)\\</span><br><span class="line">                  ^^^^^\uuu/^^\uuu/^^^^\^\^\^\^\^\^\^\</span><br><span class="line">                     ___) &gt;____) &gt;___   ^\_\_\_\_\_\_\)</span><br><span class="line">                    ^^^//\\_^^//\\_^       ^(\_\_\_\)</span><br><span class="line">                      ^^^ ^^ ^^^ ^</span><br></pre></td></tr></table></figure><p>精心设计的字符画，加上一段名言，也可以五彩缤纷的</p><p>基本原理就是在每次bash开始时，会按顺序导入一堆配置文件，执行命令或者修改环境变量等等</p><p>这里可以修改和用户最近的配置文件 <code>$HOME/.bashrc</code> ，这里能发现很多重要的配置，很多地方都会用到</p><p>个人配置如下(命令大概需要额外安装)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cows=(beavis.zen blowfish bong bud-frogs bunny cheese cower daemon default dragon-and-cow dragon elephant-in-snake elephant eyes flaming-sheep ghostbusters hellokitty kiss kitty koala kosh luke-koala meow milk moofasa moose mutilated ren satanic sheep skeleton small stegosaurus stimpy supermilker surgery three-eyes turkey turtle tux udder vader-koala vader www)</span><br><span class="line">cow=<span class="variable">$&#123;cows[$(($RANDOM % $&#123;#cows[@]&#125;</span>))]&#125;</span><br><span class="line">fortune -s computers | cowsay -f <span class="variable">$cow</span> | lolcat</span><br></pre></td></tr></table></figure><p>大概输出过程包括随机选择字符画模板，输出名言，字符画，彩虹输出</p><h4 id="4-命令快捷方式"><a href="#4-命令快捷方式" class="headerlink" title="4. 命令快捷方式"></a>4. 命令快捷方式</h4><p>核心就是 <code>alias</code> 函数</p><p>大多数能看到的最多的使用场景，应该是 <code>ls</code> 命令</p><p>比如实际执行 <code>ls</code> 的时候，会出现彩色的输出</p><p>可以在 <code>$HOME/.bashrc</code> 里看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">'ls'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></span><br></pre></td></tr></table></figure><p>意思就是在执行 <code>ls</code> 时，其实自带里一个参数 <code>--color=auto</code></p><p>在执行 <code>ll</code> 的时候，其实执行的是 <code>ls -l</code></p><p>自己比较常用的方式还包括</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> blogs=<span class="string">'ssh blogserver'</span>  <span class="comment"># ssh到blogserver时，仅需要执行 blogs 即可 (当然，这需要ssh配置正确)</span></span><br><span class="line"><span class="built_in">alias</span> mysqlMaster=<span class="string">'mysql -hxxx.xxx -uxxx -pxxx -A'</span>  <span class="comment"># mysql登陆到服务器时，只需要执行 mysqlMaster 即可，风险在于密码明文化了</span></span><br></pre></td></tr></table></figure><p>如果想要跳过快捷方式，直接执行命令，比如 <code>ls</code> ，那么用完整的命令路径即可，如 <code>/bin/ls</code> ，可以通过 <code>which ls</code> 找到 <code>ls</code> 的完整命令路径</p><h3 id="二-常用命令"><a href="#二-常用命令" class="headerlink" title="二. 常用命令"></a>二. 常用命令</h3><h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h5><p>当之无愧最常用的命令，列出当前或指定路径的文件信息，除了最基本的 <code>ls</code> 无参数执行外，还有 <code>ls -l</code> 等</p><p>有一个不常用，但是曾经解救人于危难的参数 <code>ls -li</code></p><p>输出如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -li</span><br><span class="line">total 8</span><br><span class="line">4325380 -rwxr-xr-x 1 root root 527 Nov 17 10:21 a.sh</span><br><span class="line">4325379 -rwxr-xr-x 1 root root 530 Nov 17 10:16 b.sh</span><br></pre></td></tr></table></figure><p>第一列输出了文件的 inode 号，是某个文件在一个分区上的唯一索引号，如果两个文件的索引号一致，那肯定是同一个文件。当一个文件的文件名不能在终端上显示为参数时，这个索引号就很重要了</p><p>比如要删除一个特殊文件名的文件 <code>-</code> 或者乱码的文件 (在终端里用unrar解压一个Windows环境下压缩的rar文件)</p><p>首选需要找到要删除文件的inode号，然后用 <code>find</code> 执行删除 <code>find . -inum {inode} -delete</code> 或者删除目录 <code>find . -inum {inode} -exec rm -rf {} +</code></p><blockquote><p>控制 ls 染色</p></blockquote><p>通过环境变量 <code>LS_COLORS</code> ，写在 <code>.bashrc</code> 即可</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LS_COLORS=<span class="string">"*.yml=01;35:<span class="variable">$LS_COLORS</span>"</span></span><br></pre></td></tr></table></figure><p>将 <code>*.yml</code> 染为紫色</p><h5 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h5><p>全称应该叫 <code>link</code> ，用于生成链接，一般是硬连接或者软连接</p><p>软连接是创建一个文件，并指向目标文件(linux中一切皆文件)，目的是创建一个文件的快捷方式，删除之后，只是把快捷方式删除而已，不影响目标文件</p><p>通过 <code>ln -s</code> 创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo fine &gt; linux</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">linux</span><br><span class="line"><span class="comment"># ln -s linux l</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">l  linux</span><br><span class="line"><span class="comment"># ls -li</span></span><br><span class="line">total 4</span><br><span class="line">917674 lrwxrwxrwx 1 root root 5 Jan  1 13:09 l -&gt; linux</span><br><span class="line">917673 -rw-r--r-- 1 root root 5 Jan  1 13:09 linux</span><br></pre></td></tr></table></figure><p>硬连接让一个文件拥有多个可用路径，可以用于备份，防止误删除等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ln linux h</span></span><br><span class="line"><span class="comment"># ls -li</span></span><br><span class="line">total 8</span><br><span class="line">917673 -rw-r--r-- 2 root root 5 Jan  1 13:09 h</span><br><span class="line">917673 -rw-r--r-- 2 root root 5 Jan  1 13:09 linux</span><br><span class="line">917674 lrwxrwxrwx 1 root root 5 Jan  1 13:09 l -&gt; linux</span><br></pre></td></tr></table></figure><p>创建硬连接比软连接更简单，没有 <code>-s</code> 参数，创建的硬连接和源文件指向同一个文件，可以看到两者 inode 索引相同，和软连接不一样，本身也并没有导致磁盘空间占用的翻倍。</p><p>软硬连接对比:</p><ol><li>软连接创建了新的文件，硬连接并没有</li><li>软连接可以连接到文件系统内任何地方，硬连接限制在当前设备，否则会报错 <code>Invalid cross-device link</code>，这和文件系统有关</li><li>硬连接会增加文件索引数，如上面展示的 <code>ls -li</code> 结果中的第三列，由原本的 1 增长为 2，表示该文件的硬连接数为 2，软连接不会增加该指数</li></ol><blockquote><p>特别点：一个目录的硬连接数 = 子目录数 + 2</p></blockquote><p>一个目录的每个子目录都会有一个硬连接叫 <code>..</code> 指向父路径，所以是 <code>子目录数</code> ，该目录自身是一个文件，所以硬连接数 <code>+1</code> ，然后该目录里还有一个 <code>.</code> 指向当前路径，所以硬连接数 <code>+1</code> </p><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>万能删除 <code>rm -rf xxx</code> ，除了 <code>/</code> 大概都能通通删掉</p><h5 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h5><p><code>change directory</code> 切换当前路径</p><p>默认动作:</p><p><code>cd</code> 回到用户 home 目录</p><p><code>cd -</code> 回到前一个目录</p><h5 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h5><p>创建目录</p><p><code>mkdir -p a/b/c/d</code> 一路创建目录到 <code>a</code></p><h5 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h5><p>端口资源查看，如查看某端口被那个进程占用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lsof -i :80</span></span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx    7775   root   10u  IPv4 932993      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   30628 nobody   10u  IPv4 932993      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   30629 nobody   10u  IPv4 932993      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure><h5 id="df"><a href="#df" class="headerlink" title="df"></a>df</h5><p>展示硬盘占用情况</p><h5 id="du"><a href="#du" class="headerlink" title="du"></a>du</h5><p>展示给定路径的资源占用</p><p>组合命令: <code>du -hc . | tail -n 1</code> 获取当前目录总大小</p><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><p>搜索文件</p><p>按照文件名搜索: <code>find . -name \*.py</code> 搜索当前路径下所有 .py 文件</p><p>按照文件类型搜索: <code>find . -type d</code> 搜索当前路径下所有目录类型</p><h5 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h5><p>按照树形结构展示目标路径:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tree x</span></span><br><span class="line">x</span><br><span class="line">├── h</span><br><span class="line">├── l -&gt; linux</span><br><span class="line">└── linux</span><br></pre></td></tr></table></figure><h5 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h5><p>查看端口占用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -ntpl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:26381           0.0.0.0:*               LISTEN      16693/redis-sentine</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      7775/nginx: master</span><br></pre></td></tr></table></figure><p>常用组合 <code>netstat -ntpl</code></p><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>进程列表</p><p>常用组合 <code>ps -ef | grep xxx</code>: 搜索给定进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">root      7775     1  0  2020 ?        00:00:00 nginx: master process nginx</span><br><span class="line">root     27452 23960  0 13:55 pts/1    00:00:00 grep nginx</span><br><span class="line">nobody   30628  7775  0  2020 ?        00:00:31 nginx: worker process</span><br><span class="line">nobody   30629  7775  0  2020 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure><p>各列分别表示：用户，进程号，父进程号，class，进程开始时间，TTY，CPU时间，命令</p><h5 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h5><p>给指定进程发送信号，不仅仅是 <code>SIGKILL</code></p><p>一般先通过 <code>ps</code> 找到目标进程id，<code>kill -9 {pid}</code></p><h5 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h5><p>动态展示系统进程状态 (比 top 直观)</p><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><h5 id="文本处理程序"><a href="#文本处理程序" class="headerlink" title="文本处理程序"></a>文本处理程序</h5><p>如：awk, grep, tail, head, less, more, cat, sort</p><p>每个命令都很少单独使用，大多数时候都是组合在一起</p><p>例子:</p><ul><li>docker同时持续查看多个容器日志的关键词</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps | grep xxx | awk <span class="string">'&#123;print $1&#125;'</span> | xargs docker inspect --format &#123;&#123;.LogPath&#125;&#125; | xargs tail -f | grep keyword</span><br></pre></td></tr></table></figure><h5 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h5><p>通过ssh协议访问目标机器</p><p><strong>首先生成ssh 公钥密钥对</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh-keygen -t ecdsa -C hellflame</span></span><br><span class="line">Generating public/private ecdsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_ecdsa): key</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> key.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> key.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:c1a7ZLBJEHNA7Q5oZ3Ud9lMQ7rcm4yaHNpsdIxc2uyA hellflame</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[ECDSA 256]---+</span></span><br><span class="line"><span class="string">|       .*+.  .=+.|</span></span><br><span class="line"><span class="string">|         +o .o...|</span></span><br><span class="line"><span class="string">|       . oo.. ...|</span></span><br><span class="line"><span class="string">|      o +..= o  .|</span></span><br><span class="line"><span class="string">|     . oSo= ++. .|</span></span><br><span class="line"><span class="string">|         +.o..+..|</span></span><br><span class="line"><span class="string">|         E ooB o |</span></span><br><span class="line"><span class="string">|          .=BoB  |</span></span><br><span class="line"><span class="string">|          .o*+   |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"># ls</span></span><br><span class="line"><span class="string">key  key.pub</span></span><br></pre></td></tr></table></figure><p><strong>然后在服务端部署公钥</strong></p><p>将 <code>key.pub</code> 里的内容写进服务端 <code>$HOME/.ssh/authorized_keys</code>，如果没有这个文件，创建之后，文件权限需要限制只允许当前用户有读权限</p><p>一般为了安全，在服务端可设置仅允许通过 ssh key 登陆，在 <code>/etc/ssh/sshd_config</code> 配置 <code>PasswordAuthentication no</code> ，拒绝密码登陆</p><p>更新之后重启sshd即可 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p><strong>配置本地ssh公钥</strong></p><p>在当前客户端，<code>$HOME/.ssh/config</code> 文件中添加配置如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host xxx.xx.xx.x</span><br><span class="line">    IdentityFile /path/to/key</span><br><span class="line">    User root  <span class="comment"># 服务器登陆用户名</span></span><br><span class="line">    ServerAliveInterval 30</span><br><span class="line">    ServerAliveCountMax 3</span><br></pre></td></tr></table></figure><p>其中 <code>/path/to/key</code> 指向刚生成的密钥路径</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不是命令的生产者，我只是命令的搬运工&lt;/p&gt;
    
    </summary>
    
      <category term="basics" scheme="https://hellflame.github.io/categories/basics/"/>
    
    
      <category term="linux" scheme="https://hellflame.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>锦江乐园</title>
    <link href="https://hellflame.github.io/2020/11/16/jinjiang-park/"/>
    <id>https://hellflame.github.io/2020/11/16/jinjiang-park/</id>
    <published>2020-11-16T00:19:37.000Z</published>
    <updated>2020-11-16T23:15:32.764Z</updated>
    
    <content type="html"><![CDATA[<p>具体时间是公司万圣节活动的晚上，突然想起来，纪念一下照片</p><a id="more"></a><center>当晚似乎也有万圣节活动</center><p><img src="/images/jinjiang-park/WechatIMG123.JPG" alt=""></p><center>比较魔幻的摩天轮，排队超长</center><p><img src="/images/jinjiang-park/WechatIMG122.JPG" alt=""></p><p><img src="/images/jinjiang-park/DSC_5261.JPG" alt=""></p><p><img src="/images/jinjiang-park/DSC_5258.JPG" alt=""></p><p><img src="/images/jinjiang-park/WechatIMG120.JPG" alt=""></p><p><img src="/images/jinjiang-park/WechatIMG121.JPG" alt=""></p><p><img src="/images/jinjiang-park/DSC_5294.JPG" alt=""></p><p><img src="/images/jinjiang-park/DSC_5292.JPG" alt=""></p><center>当然，并没有坐在旋转木马上</center><p><img src="/images/jinjiang-park/DSC_5180.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体时间是公司万圣节活动的晚上，突然想起来，纪念一下照片&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>邂逅花季</title>
    <link href="https://hellflame.github.io/2020/10/06/flower-life-time/"/>
    <id>https://hellflame.github.io/2020/10/06/flower-life-time/</id>
    <published>2020-10-06T01:35:38.000Z</published>
    <updated>2020-10-06T15:54:28.059Z</updated>
    
    <content type="html"><![CDATA[<p>起兴回家，邂逅家里月季从含苞待放到璀璨动人，这段对花来说最重要的时光</p><p>从到家第二天一直到离开前的早晨</p><a id="more"></a><p><img src="/images/flower-life-time/DSC_4861.JPG" alt=""><br><img src="/images/flower-life-time/DSC_4907.JPG" alt=""><br><img src="/images/flower-life-time/DSC_4956.JPG" alt=""><br><img src="/images/flower-life-time/DSC_4955.JPG" alt=""><br><img src="/images/flower-life-time/DSC_4993.JPG" alt=""></p><p>虽然实际只在家停留了不到4天，不过和家人朋友交流了挺多，虽然大巴堵车，错过飞机，重买机票，不过应该还是挺值得的捏，不像曾经的过年回家一样整天在家无所事事，这几天的时光安排的满满的，很充实</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起兴回家，邂逅家里月季从含苞待放到璀璨动人，这段对花来说最重要的时光&lt;/p&gt;
&lt;p&gt;从到家第二天一直到离开前的早晨&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>东方明珠</title>
    <link href="https://hellflame.github.io/2020/09/21/dongfang-mingzhu/"/>
    <id>https://hellflame.github.io/2020/09/21/dongfang-mingzhu/</id>
    <published>2020-09-21T12:51:59.000Z</published>
    <updated>2020-10-06T15:50:20.095Z</updated>
    
    <content type="html"><![CDATA[<p>虽然其实只是旋转餐厅聚餐，不过感觉又像是旅行了一番一般</p><a id="more"></a><center>这个角度看，稍微有了大上海的感觉</center><p><img src="/images/dongfang-mingzhu/DSC_4819.JPG" alt=""></p><center>黄浦江隐约映照出了对岸</center><p><img src="/images/dongfang-mingzhu/DSC_4824.JPG" alt=""></p><p><img src="/images/dongfang-mingzhu/WechatIMG92.jpeg" alt=""></p><p><img src="/images/dongfang-mingzhu/WechatIMG93.jpeg" alt=""></p><center>餐厅里昏暗灯光中最亮的灯</center><p><img src="/images/dongfang-mingzhu/WechatIMG94.jpeg" alt=""></p><p>旋转餐厅中实际旋转的部分是用餐区，这部分环形区域一直在缓慢转动，导致拿好食物之后就可能找不到原来的位置，以及座位可能因为太靠近边缘，摩擦发出奇怪的声音=.=</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然其实只是旋转餐厅聚餐，不过感觉又像是旅行了一番一般&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>枸杞岛大餐</title>
    <link href="https://hellflame.github.io/2020/09/06/meal-on-gouqi-island/"/>
    <id>https://hellflame.github.io/2020/09/06/meal-on-gouqi-island/</id>
    <published>2020-09-06T14:28:40.000Z</published>
    <updated>2020-09-08T23:52:05.852Z</updated>
    
    <content type="html"><![CDATA[<p>这一餐应该是在岛上最丰盛的一餐，虽说是民宿，却有五星级的感觉，但毕竟是民宿，总有些特别的感觉</p><a id="more"></a><p>这一餐应该是在岛上最丰盛的一餐，虽说是民宿，却有五星级的感觉，但毕竟是民宿，总有些特别的感觉</p><p>这天下午大家走到“山海奇观”，等拍完照，休息够了坐车下山(顺便还结识了之后的御用司机=.=)，每个人大概都很疲惫，等我们到了阿姨家时，桌上已是满满一桌菜</p><p>PS. 虽然大家叫阿姨，其实看上去和外婆一个年纪，脸上总是挂着笑容</p><p><img src="/images/meal-on-gouqi-island/WechatIMG84.jpeg" alt=""></p><p>花蛤+蛏子的拼盘大概是影响最深刻的，虽然也有人说螃蟹才是最好的，不过没吃到多少能吃的肉，所以印象也就一般了</p><p>和家里做菜或者自己做菜不一样的是，花蛤和蛏子都是精心摆设上了餐桌，总感觉像是来到了饭店，然而回过神来，周围的摆设又是那么的家常。摇头晃脑的风扇，大敞开的堂屋门，屋内仅有的这么几个人，完全像在家里一样。偌大的家里，就只有这么几个人</p><p><img src="/images/meal-on-gouqi-island/WechatIMG85.jpeg" alt=""></p><p>桌上的老干妈总是能让人想起家里的味道</p><p>隔壁空桌上的塑料筐，还有彩色的桌垫，总会让人想起家里过年时刚刚打完麻将的桌子，盒子里装满了麻将，压在还没收起的麻将桌布上。每次过年，大家都想让空荡荡的堂内充满快乐的空气，这里似乎也有同样的氛围。不过也许大家都玩的挺开心，只有自己才会在意那些没有填满的空气</p><p>从大学开始，每年回家的次数就越来越少，在家的时间越来越短。并不仅仅是因为离家远，嫌麻烦，大概也是因为自己没办法给家里的每个人都带来快乐的空气，家里也渐渐没有其他人营造这样的氛围，家的概念大概只留存于小时候的记忆</p><p>民宿的阿姨在我们看完日出，回来吃早饭的时候，和我们说起了自己在嵊泗工作的儿子，虽然想多问几句让阿姨多说些话，不过她最终还是欲言又止。这几天跨过了周末，不过我们也没有见到过除了两位老人之外的其他亲戚，所以她的儿子应该只会在更长一些的假期回家吧，也许。这一天吃完早饭，我们就准备出发回上海了，结算了这几天的费用之后，阿姨也不忘让我们介绍更多人来这里，一方面是能挣钱，另一方面大概也是能填补更多寂寞的空间吧</p><p>前一天早上，我们几个男同事都意外的起的很早，顺便搭着公交去了隔壁岛上的菜市场。</p><p>虽然可能是我没有仔细观察，不过公交上几乎都是上了岁数的人。倒不是老态龙钟，反而显得神清气爽，只是稍显花白的头发有些和他们不相称。</p><p>目的地的菜场倒是有挺多年轻的商贩，可能出海打鱼还是需要年轻人的力量，坑了我们一只梭子蟹的老板也挺年轻的样子，手法很熟练……不过一回到公交站台，我们几个人还是很难和满头银丝的他们站在一起，最终漫漫的等公交还没有结束，就匆匆打车返回了</p><p>在回上海的船上，静静地回想着岛上的经历。除了难得一见的风景之外，就是空巢在家的老人们了。虽然只要在家就能把钱挣，但最能让他们开心的，还是能够和其他人多交流，或者说和自己的家人在一起吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一餐应该是在岛上最丰盛的一餐，虽说是民宿，却有五星级的感觉，但毕竟是民宿，总有些特别的感觉&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>博客图片加载优化</title>
    <link href="https://hellflame.github.io/2020/09/04/image-load-optimize/"/>
    <id>https://hellflame.github.io/2020/09/04/image-load-optimize/</id>
    <published>2020-09-04T00:20:07.000Z</published>
    <updated>2020-09-04T13:50:14.441Z</updated>
    
    <content type="html"><![CDATA[<p>“一站式”解决超慢图片博客的加载优化问题</p><a id="more"></a><p>所谓“一站式”，大概是所有图片资源都在 <code>github.io</code> 一个站点，国内访问相关地址时一般都会十分缓慢，如果再把超大的图片放上去，不用代理的话，大概只能在不繁忙的凌晨能够加载出图片，平时应该什么图片都加载不出来，因为所有图片几乎都是同时请求资源，但是谁都没有请求完就都超时了</p><p>这里所谓的“解决”，其实并不能解决图片加载慢的问题，真正要解决大概只有通过CDN或者其他更快节点的图片节点才能解决。这里只是能够尽最大努力一张图片一张图片的加载</p><p>由于整个网站都是通过 <code>hexo</code> 生成完整的静态网站，所以第一步要做的，是在翻译markdown时将 <code>img</code> 标签的 <code>src</code> 属性置为无效，但又要能够在访问时恢复成正确的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.more.replace(<span class="regexp">/\.JPG/igm</span>, <span class="string">".webp-"</span>)</span><br></pre></td></tr></table></figure><p>这里做了两件事情，首先是将原始的 <code>jpg</code> 文件后缀替换为 <code>webp</code> ，使得在支持 webp 的浏览器上使用更小的资源，当然，这个webp图片是在生成静态网站时生成的；然后是在替换后缀时，添加了一个 <code>-</code> ，这样这个图片就一定是 <code>404</code> 了，这样图片的响应时间就会和响应 <code>404</code> 的时间一致的短了。更理想的情况应该是把 <code>src</code> 属性完全移除，添加一个类似 <code>data-src</code> 的属性，这样图片甚至都不会去尝试请求 <code>404</code> 地址，不过这里为了简单方便，就用了这种替代方式</p><p>最后，在访问时，需要将无效的地址替换为有效地址，重要的是依次替换，并且在上一张图片加载成功之后，下一张图片再继续加载</p><p>这里在原本蹩脚的 <code>js</code> 代码里，又添加了蹩脚的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceImg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browser = getBrowser()</span><br><span class="line">  <span class="keyword">const</span> supportWebp = browser === <span class="string">"FireFox"</span> || browser === <span class="string">"Chrome"</span> <span class="comment">// 判断是否支持 webp</span></span><br><span class="line">  <span class="keyword">const</span> images = $(<span class="string">".post img"</span>) <span class="comment">// 获取所有img标签</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; images.length; i ++) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = $(images[i])</span><br><span class="line">    <span class="keyword">if</span> (target.parent().get(<span class="number">0</span>).tagName.toLowerCase() === <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> originSrc = target.attr(<span class="string">'src'</span>)</span><br><span class="line">    <span class="keyword">if</span> (originSrc.slice(<span class="number">-1</span>)[<span class="number">0</span>] !== <span class="string">'-'</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断如果已经替换过，则跳过</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> realSrc = originSrc.slice(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">const</span> jpgSrc = realSrc.slice(<span class="number">0</span>, realSrc.indexOf(<span class="string">".webp"</span>)) + <span class="string">".JPG"</span></span><br><span class="line">    $(wrapper).attr(<span class="string">"data-fancybox"</span>, <span class="string">"gallery"</span>) <span class="comment">// 添加fancybox支持</span></span><br><span class="line">    <span class="keyword">if</span> (supportWebp) &#123;</span><br><span class="line">      <span class="comment">// 如果支持 webp</span></span><br><span class="line">      target.attr(<span class="string">'src'</span>, realSrc)</span><br><span class="line">      $(wrapper).attr(<span class="string">"href"</span>, realSrc)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不支持webp</span></span><br><span class="line">      target.attr(<span class="string">'src'</span>, jpgSrc)</span><br><span class="line">      $(wrapper).attr(<span class="string">"href"</span>, jpgSrc)</span><br><span class="line">    &#125;</span><br><span class="line">    images[i].onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 在当前这张图片加载完之后，再次执行 replaceImg</span></span><br><span class="line">      replaceImg()</span><br><span class="line">    &#125;</span><br><span class="line">    target.wrap(wrapper)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// 成功替换一次之后，立即结束循环</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加执行时机</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  replaceImg()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>整个过程采用了类似递归的形式触发下一张图片的加载，好处在于整个页面内的所有图片都会从上到下一张一张的加载，即使网速很慢，现在也会使用全部的带宽资源加载一张图片，如果依然无法加载出来，，，那说明真的不行，这个时候可以设计图片的 <code>onerror</code> 事件，决定是否要尝试下一张或者重试</p><p>嗯，，只想做一站式的人大概就只能想出这种节约资源的方式了=。=</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“一站式”解决超慢图片博客的加载优化问题&lt;/p&gt;
    
    </summary>
    
      <category term="basics" scheme="https://hellflame.github.io/categories/basics/"/>
    
    
      <category term="web" scheme="https://hellflame.github.io/tags/web/"/>
    
      <category term="javascript" scheme="https://hellflame.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>海边日出</title>
    <link href="https://hellflame.github.io/2020/09/02/sun-rise/"/>
    <id>https://hellflame.github.io/2020/09/02/sun-rise/</id>
    <published>2020-09-02T13:33:11.000Z</published>
    <updated>2020-09-02T13:49:21.717Z</updated>
    
    <content type="html"><![CDATA[<p>算是第一次早起看日出，虽然意外的睡过了一点点，不过还是勉强在开始前赶到了</p><a id="more"></a><p><img src="/images/sun-rise/DSC_4695.JPG" alt=""><br><img src="/images/sun-rise/DSC_4698.JPG" alt=""><br><img src="/images/sun-rise/DSC_4710.JPG" alt=""><br><img src="/images/sun-rise/DSC_4713.JPG" alt=""><br><img src="/images/sun-rise/DSC_4719.JPG" alt=""><br><img src="/images/sun-rise/DSC_4727.JPG" alt=""><br><img src="/images/sun-rise/DSC_4732.JPG" alt=""><br><img src="/images/sun-rise/DSC_4740.JPG" alt=""><br><img src="/images/sun-rise/DSC_4748.JPG" alt=""><br><img src="/images/sun-rise/DSC_4766.JPG" alt=""><br><img src="/images/sun-rise/DSC_4767.JPG" alt=""><br><img src="/images/sun-rise/DSC_4796.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算是第一次早起看日出，虽然意外的睡过了一点点，不过还是勉强在开始前赶到了&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>枸杞岛</title>
    <link href="https://hellflame.github.io/2020/09/01/gouqi-island/"/>
    <id>https://hellflame.github.io/2020/09/01/gouqi-island/</id>
    <published>2020-09-01T15:19:25.000Z</published>
    <updated>2020-09-02T12:36:35.942Z</updated>
    
    <content type="html"><![CDATA[<p>这大概是最后一次部门旅游了</p><a id="more"></a><center>启程前的码头</center><p><img src="/images/gouqi-island/DSC_4114.JPG" alt=""></p><center>船速还是挺快的=。=</center><p><img src="/images/gouqi-island/DSC_4115.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4126.JPG" alt=""></p><center>天际线上的白色，大概就是最大的海上牧场的侧影</center><p><img src="/images/gouqi-island/DSC_4133.JPG" alt=""></p><center>之后两天游泳的海滩</center><p><img src="/images/gouqi-island/DSC_4143.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4145.JPG" alt=""></p><center>浪花还是那么不可捉摸</center><p><img src="/images/gouqi-island/DSC_4156.JPG" alt=""></p><center>这个时候应该也有人面对着大海沉思</center><p><img src="/images/gouqi-island/DSC_4198.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4200.JPG" alt=""></p><center>彩虹阶梯，大概是和旁边的彩虹公路相对应</center><p><img src="/images/gouqi-island/DSC_4211.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4223.JPG" alt=""></p><center>同事说见过最蓝的海水</center><p><img src="/images/gouqi-island/DSC_4235.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4241.JPG" alt=""></p><center>这里能俯瞰几乎全岛</center><p><img src="/images/gouqi-island/DSC_4242.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4244.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4279.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4296.JPG" alt=""></p><center>民宿群落(落脚点也在其中)</center><p><img src="/images/gouqi-island/DSC_4298.JPG" alt=""></p><center>更多涂鸦其实都挺有意思的</center><p><img src="/images/gouqi-island/DSC_4309.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4310.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4311.JPG" alt=""></p><center>沙海拾贝(同事拾的贝)</center><p><img src="/images/gouqi-island/DSC_4398.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4404.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4407.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4423.JPG" alt=""></p><center>这个角度应该很少有人能够拍到=。=</center><p><img src="/images/gouqi-island/DSC_4461.JPG" alt=""><br><img src="/images/gouqi-island/DSC_4463.JPG" alt=""></p><center>多看几眼，会有深邃的感觉</center><p><img src="/images/gouqi-island/DSC_4563.JPG" alt=""></p><center>大王沙滩，本来是付费沙滩，不过音乐会晚上蹭了一趟</center><p><img src="/images/gouqi-island/DSC_4567.JPG" alt=""></p><center>晚霞的瞬间，稍纵即逝</center><p><img src="/images/gouqi-island/DSC_4568.JPG" alt=""><br><img src="/images/gouqi-island/WechatIMG68.jpeg" alt=""></p><center>挺尴尬的一场音乐会，讲真，观众和歌手都是</center><p><img src="/images/gouqi-island/WechatIMG76.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这大概是最后一次部门旅游了&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>弥留之肉</title>
    <link href="https://hellflame.github.io/2020/07/27/dirty-meat/"/>
    <id>https://hellflame.github.io/2020/07/27/dirty-meat/</id>
    <published>2020-07-26T23:39:04.000Z</published>
    <updated>2020-09-02T13:26:32.881Z</updated>
    
    <content type="html"><![CDATA[<p>做饭时不小心把做咖喱用的鸡肉漏到地上，让人想起了很久以前和别人撕过的葡萄先吃酸还是先吃甜的问题</p><a id="more"></a><p>做饭时不小心把做咖喱用的鸡肉漏到地上，让人想起了很久以前和别人撕过的葡萄先吃酸还是先吃甜的问题</p><p>记得当时说过，葡萄在吃掉之前，很难知道到底是酸是甜，与其纠结先吃酸还是甜，还不如认真体味令人惊喜的味道，毕竟不管是酸是甜，只有吃了才知道。大概当时只是想要嘲笑这种为了说明道理而编故事的行为，这种类似作出先苦后甜还是先甜后苦的选择，大概只会有抱着一定要吃完葡萄的心情的人才需要作出这样的选择。</p><p>如果抱着不应该浪费别人的劳动成果的想法，当然不得不吃掉所有葡萄，无论酸甜。假设事先知道所有葡萄的酸甜程度，先酸后甜意味着给一切的结束一点最后的希望，至少最后的结果是好的，就想先苦后甜一样容易被大多数人接受，也顺便可以将开始苦当作是对自己的磨练，最后的甜作为回报，只要这么一厢情愿的相信着，大概会一直很幸福。悔于为这串葡萄付出了金钱的人，大概也可以用同样的理由来安慰自己，不过这幸福的背后更多的是后悔吧，如果他什么时候想起了一切的开始，虚假的幸福最终只会破灭</p><p>假设事先知道所有葡萄的酸甜程度，同样可以选择先甜后酸。至少曾经吃过最甜的葡萄，能够让自己在酸的现实下回忆曾经的甜，让现在的酸不再显得那么酸，甚至酸后也能有回甘。不过大多数人觉得这样的选择太过残酷，可能只有非常乐观的人才能做出这样的选择。</p><p>两种选择都是很纯粹的选择，纯粹到几乎没有人能坚持选择到最后，毕竟嘴上这么选择，身体却是很诚实的给神经系统反馈着味觉。倒不是说我们只喜欢甜，只是我们大概更喜欢酸酸甜甜的味道，长时间的单一味觉刺激会让人忘记它真正的味道，时酸时甜，大概才是生活真正的样子，再说，谁会这么斤斤计较这么多葡萄之间的酸甜呢，消耗这么多内存，就为了记录这么无关紧要的东西？</p><p>再说，我们很难，甚至根本不能在吃葡萄之前就知道葡萄的酸甜程度，更不要说给一串葡萄里所有的葡萄都精确排序编码，一板一眼。当然，如果有试纸，大概可以知道，不过那时候每个葡萄都会留下难看的测试痕迹，想不想吃又是另一回事了。人们只是为了讲道理，编了这么一个思想实验，大概整个前提都是错误的。</p><p>每一个葡萄其实都是薛定谔的猫，不吃一口不知道是酸是甜。与其纠结每颗葡萄的酸甜，不如接受这种未知的味道所带来的惊喜，毕竟每一颗葡萄也都是那么独一无二，吃掉之后也没有办法再完整的第二次体验入口的惊喜，珍惜每一次体验，大概是吃葡萄的最高境界了，(逃=.=</p><p>我之所以不会做出这个思想实验约束的两种选择，大概还是因为我只是在这条边界线上，不偏不倚。</p><p>之所以会想到这个葡萄实验，应该是觉得那块菜板外的鸡肉，其实更像是这里的酸葡萄，能够显而易见的知道吃掉这块肉的代价，如果要以此改改这个实验，应该是：如果有一串葡萄摆在面前，其中有坏葡萄和好葡萄，坏的几乎发霉变滥，好的依然光泽鲜艳。这时候人们的选择才会显得更自然一点，比如直接抛弃坏葡萄怎么样？当然人们依然可以坚信外表的变质并不总是意味着味道的改变，也可以怀疑好葡萄其实巨酸，不过这些都不重要，重要的是这个选择比酸甜的选择更加直观并且具有预见性。</p><p>最终这块肉被洗了洗，下了锅，貌似并没有从吃的过程中发现有奇怪的感觉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做饭时不小心把做咖喱用的鸡肉漏到地上，让人想起了很久以前和别人撕过的葡萄先吃酸还是先吃甜的问题&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>夏天的味道</title>
    <link href="https://hellflame.github.io/2020/06/01/summer-nioi/"/>
    <id>https://hellflame.github.io/2020/06/01/summer-nioi/</id>
    <published>2020-06-01T15:21:28.000Z</published>
    <updated>2020-06-01T15:43:16.647Z</updated>
    
    <content type="html"><![CDATA[<p>空气中再一次充满了熟悉的</p><p>那耗尽了繁盛生命力之后的余味</p><p>埋伏在楼下</p><p>仿佛给湿热的空气徒增密不透风的杀意</p><p>压的人喘不过气</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;空气中再一次充满了熟悉的&lt;/p&gt;
&lt;p&gt;那耗尽了繁盛生命力之后的余味&lt;/p&gt;
&lt;p&gt;埋伏在楼下&lt;/p&gt;
&lt;p&gt;仿佛给湿热的空气徒增密不透风的杀意&lt;/p&gt;
&lt;p&gt;压的人喘不过气&lt;/p&gt;

      
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>libressl + ssh 编译安装</title>
    <link href="https://hellflame.github.io/2020/05/21/ssh-update-with-libressl/"/>
    <id>https://hellflame.github.io/2020/05/21/ssh-update-with-libressl/</id>
    <published>2020-05-21T15:19:23.000Z</published>
    <updated>2020-05-23T14:47:20.164Z</updated>
    
    <content type="html"><![CDATA[<p>因为特别的契机，需要在一群没有网络的新系统中升级 <code>ssh</code> ，理论上是一个很麻烦的事情，不过最终还是搞定了</p><p>安全简洁的升级ssh</p><a id="more"></a><p>总之，在不破坏原操作系统 <code>openssl</code> + <code>openssh</code> ，并且没有外网支持的情况下，在 <code>debian</code> 中正常安装了 <code>libressl</code> + <code>openssh</code> 的组合，网上给出的大多数方案是直接替换原本的 <code>ssh</code> 服务，不过如果操作不当，会导致 <code>ssh</code> 无法使用，视情况，后果可能很麻烦，所以这里不会影响原 <code>ssh</code> 服务</p><p>首先，需要有一台能够正常联网使用的 <code>debian</code> ，才能编译好 <code>libressl</code> 和 <code>openssh</code> ，目标服务器能做的就只是接收拷贝的文件了，所以这里需要在外网编译安装的位置，就是目标服务器上的安装位置</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>在 <code>libressl</code> 官网下载 <a href="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/" target="_blank" rel="noopener">libressl</a> ，比如 <code>libressl-3.1.2.tar.gz</code></p><p>在 <code>openssh</code> 官网下载 <a href="https://www.openssh.com/portable.html" target="_blank" rel="noopener">openssh</a> ，比如这里的 <code>openssh-8.2p1</code></p><h4 id="编译安装-libressl"><a href="#编译安装-libressl" class="headerlink" title="编译安装 libressl"></a>编译安装 libressl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xf libressl-3.1.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libressl-3.1.2</span><br><span class="line">./configure --prefix=/opt/libressl  <span class="comment"># 一般习惯把用户软件安装在 /opt, 这也是为了方便移植</span></span><br><span class="line">make -j4  <span class="comment"># 这个过程会比较长</span></span><br><span class="line">make check</span><br><span class="line">sudo make install  <span class="comment"># sudo 主要是 /opt 一般普通用户没权限</span></span><br></pre></td></tr></table></figure><p><strong>新增动态库配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root</span></span><br><span class="line"><span class="built_in">echo</span> /opt/libressl/lib &gt; /etc/ld.so.conf.d/libressl.conf  <span class="comment"># 重要</span></span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><p>文件名不重要，关键在于 <code>/etc/ld.so.conf.d/</code> 目录下创建 <code>.conf</code> 文件，并写下 <code>/opt/libressl/lib</code> 添加到动态库搜索路径中，<code>ldconfig</code> 让该配置生效，这一步不仅需要在当前机器上操作，最终也需要在目标服务器上操作</p><h4 id="编译安装-openssh"><a href="#编译安装-openssh" class="headerlink" title="编译安装 openssh"></a>编译安装 openssh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xf openssh-8.2p1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssh-8.2p1</span><br><span class="line">./configure --prefix=/opt/ssh --with-ssl-dir=/opt/libressl  <span class="comment"># 指定ssh安装路径，以及libressl路径</span></span><br></pre></td></tr></table></figure><p>configure 之后，正常情况下应该有类似下面的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">              Host: x86_64-pc-linux-gnu</span><br><span class="line">          Compiler: cc</span><br><span class="line">    Compiler flags: -g -O2 -pipe -Wno-error=format-truncation -Wall -Wpointer-arith -Wuninitialized -Wsign-compare -Wformat-security -Wsizeof-pointer-memaccess -Wno-pointer-sign -Wno-unused-result -Wimplicit-fallthrough -fno-strict-aliasing -D_FORTIFY_SOURCE=2 -ftrapv -fno-builtin-memset -fstack-protector-strong -fPIE</span><br><span class="line">Preprocessor flags: -I/opt/libressl/include  -D_XOPEN_SOURCE=600 -D_BSD_SOURCE -D_DEFAULT_SOURCE</span><br><span class="line">      Linker flags: -L/opt/libressl/lib  -Wl,-z,relro -Wl,-z,now -Wl,-z,noexecstack -fstack-protector-strong -pie</span><br><span class="line">         Libraries: -lcrypto -ldl -lutil -lz  -lcrypt -lresolv</span><br></pre></td></tr></table></figure><p>如果这一步有关于 <code>ssl</code> 相关的错误报出的话，需要检查动态库配置是否有问题，曾经在这里徘徊了很久=。=</p><p>如果没有问题就可以继续了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br><span class="line">make tests  <span class="comment"># 时间比较久，不过应该是值得的</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装过程基本上就结束了，接下来需要配置 <code>ssh</code> 在别的端口启动</p><p><code>/opt/ssh/etc/sshd_config</code> 修改端口为 <code>23</code> (不与服务器当前ssh端口相同即可)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 23</span><br></pre></td></tr></table></figure><h4 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/ssh/sbin/sshd  <span class="comment"># 需要超级用户权限，并且使用绝对路径</span></span><br></pre></td></tr></table></figure><p>尝试本机登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 23 hellflame@localhost</span><br></pre></td></tr></table></figure><p>输入密码，理论上能够正常登录即可</p><h4 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h4><p>将两个安装目录打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -cvf ssh.tar /opt/libressl /opt/ssh</span><br></pre></td></tr></table></figure><p>将 <code>ssh.tar</code> 拷贝至目标服务器，恢复 <code>libressl</code> , <code>ssh</code> 至 <code>/opt</code> 目录</p><p><strong>更新动态库配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root</span></span><br><span class="line"><span class="built_in">echo</span> /opt/libressl/lib &gt; /etc/ld.so.conf.d/libressl.conf  <span class="comment"># 重要</span></span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><p>动作和之前相同</p><p>启动 <code>sshd</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/empty  <span class="comment"># 大概率需要创建这个目录，然后再启动</span></span><br><span class="line"></span><br><span class="line">/opt/ssh/sbin/sshd</span><br></pre></td></tr></table></figure><p>剩下验证一下新的ssh实例是否可以正常使用</p><h4 id="替换原ssh"><a href="#替换原ssh" class="headerlink" title="替换原ssh"></a>替换原ssh</h4><p><strong>这一步相对比较危险，搞不好重启之后就无法登录服务器了</strong></p><p>此时其实新旧两个版本的ssh都可以正常运行，不一样的是原ssh还有默认的启动脚本支持，所以这里其实只需要先通过新版ssh端口登陆到服务器，更新启动脚本 <code>/etc/init.d/ssh</code> 即可</p><p>主要需要更新其中的 <code>ssh配置位置</code>，<code>可执行文件路径</code> ，不过我实际上并没有操作这一步，而只是简单的关闭了旧ssh服务，这是出于几个考虑</p><ol><li>防止重启之后新版sshd启动失败，而旧版sshd已经没有启动入口，导致无法登录服务器</li><li>如果新版sshd由于误操作崩溃，硬重启服务器之后还有旧版服务可以自动启动</li><li>服务器不可登录风险低</li></ol><p>毕竟只要正常使用新端口的ssh服务即可，客户端的默认配置可以通过 <code>$HOME/.ssh/config</code> 文件控制端口使用</p><p>当然，走过这一步也没问题，至少以后重启服务器之后都能使用新版本的ssh服务</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>这里在编译 <code>libressl</code> 和 <code>openssh</code> 的时候都仅展示使用了最简单的配置，或者说移植编译安装中最核心的配置，实际情况中需要根据需要，添加编译参数，当然可能也会带来新的库的安装，这些就要靠每个人自由发挥了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为特别的契机，需要在一群没有网络的新系统中升级 &lt;code&gt;ssh&lt;/code&gt; ，理论上是一个很麻烦的事情，不过最终还是搞定了&lt;/p&gt;
&lt;p&gt;安全简洁的升级ssh&lt;/p&gt;
    
    </summary>
    
      <category term="basics" scheme="https://hellflame.github.io/categories/basics/"/>
    
    
  </entry>
  
  <entry>
    <title>开启音乐之路</title>
    <link href="https://hellflame.github.io/2020/05/17/music-starter/"/>
    <id>https://hellflame.github.io/2020/05/17/music-starter/</id>
    <published>2020-05-17T15:05:15.000Z</published>
    <updated>2020-05-17T15:45:26.395Z</updated>
    
    <content type="html"><![CDATA[<p>也许有一天不当程序员了，还可以全身心投入音乐中</p><a id="more"></a><p>如果说程序设计的过程是对代码进行组织架构的技术的话，音乐就是对音符组合编织的艺术了，无论是书写还是阅读优秀的代码都会让人赞叹其中的奥妙，编曲与演奏一定也有类似的美。</p><p>其实从小一直惊叹于演奏者能将这么多的声音组合在一起，产生和谐动听的音乐，然而那个时候这条路似乎并不能成为一种选择，不过默默的欣赏音乐，听清每个音，区分不同的乐器，也算是一种乐趣，作为不能演奏的一种补偿。</p><p>终于，在这个五一，带着想要编曲的目的，买了 <code>midi 键盘</code>，作为基础的音符输入乐器。毕竟总不能一直用键盘尝试各种音高=。=</p><p>很神奇的是在键盘第二天下午到手之后，很快就找到了 <code>小星星变奏曲</code> 前几个小节的调，顺便在键盘上到处移调。毕竟都是靠尝试键盘上各个黑白琴键的音弹出来的，这种不靠谱的弹奏方式应该是有一定音乐细胞的证明(一定原因是对五线谱还不熟，全靠听觉区分不同的音高)</p><p>虽然节奏不够稳定，但接下来的一周时间，发现只要是能口哨吹出来的音乐，都可以在键盘上演奏出来，实在拿不准的音，看一下五线谱还是能找到音，剩下的就是熟练度问题了</p><p><img src="/images/music-starter/DSC_4081.JPG" alt="音乐台"></p><p>虽然选择的是49键，但我的口哨最多应该就只能勉强在三个八度范围内徘徊(高不上低不下那种)，至少键盘能演奏比口哨更广的音域以及更多的音色</p><p>现在的目标应该只是能完整复现听到的音乐，不过一旦到了口哨无法吹奏的程度，就会花更多时间来寻找音高，更不用说高低音配合的音乐以及其中的和弦了=。=</p><p>不过，也许只要继续锻炼乐感以及学习更多乐理知识，不仅能够自由弹奏，自由编曲也不会太遥远。万物还真是相通的捏</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也许有一天不当程序员了，还可以全身心投入音乐中&lt;/p&gt;
    
    </summary>
    
      <category term="diaries" scheme="https://hellflame.github.io/categories/diaries/"/>
    
    
  </entry>
  
  <entry>
    <title>没有泡椒的蛋炒饭</title>
    <link href="https://hellflame.github.io/2020/04/04/rice-egg-and-hot-pepper/"/>
    <id>https://hellflame.github.io/2020/04/04/rice-egg-and-hot-pepper/</id>
    <published>2020-04-04T05:38:15.000Z</published>
    <updated>2020-04-07T00:05:50.374Z</updated>
    
    <content type="html"><![CDATA[<p>这大概是一个菜谱</p><a id="more"></a><p>掏出泡椒坛子里仅剩的几个泡椒，嗯，这大概是最后一次泡椒蛋炒饭了，因为已经很久没有在超市见到泡椒的影子了(难道是因为腌制品被查出亚硝酸盐超标，被集体下架了？)。不过应该没关系，也许没有泡椒，还是蛋炒饭。</p><p>首先，每个泡椒需要先一刀从头到脚一分为二，再横切三刀或四刀，让每一小块泡椒不至于太大，也不会太小。太大会导致辣味太过集中，刺激味蕾无法体会其他味道；太小则会让辣味在翻炒过程中散尽，吃的过程中甚至不会想起来放了泡椒这回事。</p><p>这时不仅要切好泡椒，也要把可选的葱切好，还要检查是不是所有该准备的东西已经准备好，不然开火之后只会手忙脚乱。首先是煮好的米饭(一般前一天晚上煮好，第二天自然凉，炒前稀疏盛到碗里，这一步很重要)，鸡蛋两个或三个，红油豆瓣酱随时待命，酱油目光可及，油桶方便倾倒，抽油烟机现在就可以打开了</p><p>点中火倒油，浸润锅底附近，当闻到油香时，放入切好的泡椒。这个时候可能油锅会沸腾起来，所以也可以先打入一个鸡蛋，让油温稍为降低，在还有油的地方开始放泡椒，最后用鸡蛋铺满锅底的油面。开始抖锅，将鸡蛋抖散黄，也是为了让油能够更多与鸡蛋接触，当流体较少时，开始用锅铲翻炒。翻炒过程中将大块鸡蛋用锅铲切分为小块，如果上一步流体比较多的话，鸡蛋在翻炒过程中更容易变得细碎。</p><p>至于鸡蛋需要到多洗碎，其实和油量有关。在油比较多的情况下，细碎的鸡蛋能够通过稀松的结构吸收更多油，也容易炒出香味，但油太多的话又会导致炒饭过于油腻。所以一般不应该加太多油，或者说先让炒好的鸡蛋有饥渴的感觉比较好。</p><p>倒入盛在碗里的冷饭，之所以不直接从饭煲里盛出来，是为了减少手忙脚乱，把握不清饭量，还有为了让结块的冷饭先打散为小块，充分呼吸空气。通过锅铲将小块的冷饭进一步压散，让饭与鸡蛋更亲密的接触，让饭充分吸收鸡蛋中留存的油。但每一次挤压，都要从锅底整体翻炒一遍，以防饭粒粘锅，当锅中还有少量小块冷饭时，开始接下来重要的一步。</p><p>略微降低火力，放入一筷子的红油豆瓣酱，顺便用沾满红油的筷子替代锅铲，在锅中搅拌，一方面是为了把筷子上沾染的红油也炒进饭里，另一方面是为了让刚刚由于用力挤压，过于紧张的一锅炒饭稀松下来，让他们也透透气。现在用锅铲翻炒整个炒饭，让豆瓣酱和炒饭充分混合，也是为了让红油慢慢回填鸡蛋失去的油。</p><p>如果只有豆瓣酱，可能略显乏味，所以一般还会倒少量酱油。如果豆瓣酱的作用是盐，那酱油的作用应该就是味精了，顺便也让饭粒染上诱人的颜色。每次听到酱油在炒饭锅底沸腾的声音，唾液都会不自觉的分泌。如果什么时候火力太大，炒焦了，一般会加入醋来中和部分焦味，最后也一定要加葱，等多余的水汽挥发。这时的味道已经能够满足咸淡要求(想起来已经很久没有动过盐袋子了=。=)</p><p>最后放入可选的葱，继续翻炒，让香味充满整个厨房。</p><p>关火出锅，一般情况下会炒两碗的份，一份是今天的晚饭，另一份是第二天中午的便当，冷却后放进冰箱。</p><p>中午的便当都会用微波炉大火加热三分钟，这时的炒饭会比昨天更加颗粒分明，毕竟冰箱中水汽郁结，微波炉让水汽散失，饭粒从紧缩到膨胀，彼此分离，所以总会有便当反而比新鲜炒饭更好吃的感觉。</p><p>每次同事说起我的炒饭，总会说这炒饭炒的很好，这充满食欲的颜色和香味。不过虽然我每次都说了做法，但貌似没有人按照我说的每一步来做，尤其是关于泡椒，都是用新鲜辣椒替代，还是辣椒圈，可以很容易的想象出这种与蛋炒饭格格不入的味道。</p><p>虽说在尝试阶段，我也用过辣椒面放进炒饭里，但每次不是尝不到辣椒的味道，就是只有辣味。最终找到泡椒与蛋炒饭的完美组合。</p><p>每次中午吃泡椒蛋炒饭，打开微波炉，葱香裹挟着蛋香扑鼻而来，红色的豆瓣酱与褐色的酱油带来的脆黄饭粒，加上细碎鸡蛋的明黄，偶见绿色的葱末以及深褐色的豆瓣块，已经等不及开始开始品尝。</p><p>泡椒被鸡蛋包裹，看似是一片普通的鸡蛋，被一勺包进嘴里，细细咀嚼，偶有的辣味和淡淡的酸味形成味觉冲击，但立刻被周围的鸡蛋和饭粒冲散，虽然豆瓣酱也竭尽所能提供辣味，但终究因为辣味过于分散，只能在余味中体会到些许辣的反击，酱油的鲜味让这个过程进行的更加柔和，让葱香和蛋香都能在咽下一口之后依然在鼻中回荡</p><p>不是每一口都能尝到泡椒，这也让每一口都期待能够尝到泡椒。如果没有泡椒，也就失去了每次期待，最终蛋炒饭也回归了蛋炒饭。这道从小学就开始尝试各种做法的早餐主食，想想曾经一路走来，各种千奇百怪的做法，也是有趣的经历捏</p><p>尝试过先炒饭再把蛋浇在表面，尝试过把冷饭调进鸡蛋里一起煎，尝试过在鸡蛋里先调入豆瓣酱再炒饭，尝试过蛋炒饭里加入咖喱块，加入豆豉，加入金枪鱼。。。尝试过没有鸡蛋的炒饭(好吧，这和蛋炒饭没关系)，更尝试过整个蛋炒饭里无论怎么翻炒都保持一个完整的蛋饼不坏的蛋饭分离炒饭，这种炒饭一度炒了至少两个学年作为早饭，无人能敌，无论是保持蛋饼不坏的能力还是这种持久度 =。=</p><p>因为炒蛋炒饭伤过人，流血的那种，伤口很大的那种，到现在依然印在心里的那种，足够讲另一个故事的那种，虽然不是那种能和别人说起来就很自豪的从小学就开始炒蛋炒饭的故事，但是蛋炒饭的故事可能到这里就要结束了</p><p>经历了十几年的蛋炒饭变迁，终于找到了让蛋炒饭最美味的做法，做法也以书面形式记录下来，虽然也许这是最后一碗泡椒蛋炒饭，不过寻找之旅终于迎来终点。</p><p>最后放一张偶然拍下来的炒饭，画上句号。</p><p><img src="/images/rice-egg-and-hot-pepper/dinner.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这大概是一个菜谱&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>河南之旅</title>
    <link href="https://hellflame.github.io/2020/03/30/trip-of-henan/"/>
    <id>https://hellflame.github.io/2020/03/30/trip-of-henan/</id>
    <published>2020-03-30T15:33:36.000Z</published>
    <updated>2020-03-31T15:26:10.378Z</updated>
    
    <content type="html"><![CDATA[<p>本来应该是年前的一次出差记录，不过时间比较紧，被太多事情纠缠，到现在才想起来这些</p><p>前前后后大概有整整1个月的跨度，从第一次出差，到一个月后，跨年，赶在公司年会前结束出差，还是有大概百张照片筛选</p><p>嗯，算是到北方经历了一番～</p><p>嗯，再也不吃烩面了。。。</p><a id="more"></a><center>莫名的在早上5点就醒了，顺便看看星空</center><center><small>猎户座果然到处到能清楚的辨别出来，当然，是在原图上</small></center><p><img src="/images/trip-of-henan/DSC_3408.JPG" alt=""></p><center>第一次匆匆来郑州，匆匆离开，经过文化公园</center><p><img src="/images/trip-of-henan/DSC_3428.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3432.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3436.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3440.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3447.JPG" alt=""></p><center>元旦前夕，跨年前夜</center><center><small>被烩面搞垮的一晚</small></center><p><img src="/images/trip-of-henan/DSC_3455.JPG" alt=""></p><center>虽然气温很低，但人还是挺多的</center><p><img src="/images/trip-of-henan/DSC_3456.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3462.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3463.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3466.JPG" alt=""></p><center>被灯光照亮的粼粼柔波</center><p><img src="/images/trip-of-henan/DSC_3467.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3469.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3472.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3473.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3477.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3480.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3483.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3485.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3486.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3488.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3505.JPG" alt=""></p><center>隐约的光径，总是充满了神秘</center><p><img src="/images/trip-of-henan/DSC_3507.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3512.JPG" alt=""></p><center>清明上河园</center><center><small>元旦当天，开封</small></center><p><img src="/images/trip-of-henan/DSC_3521.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3522.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3524.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3525.JPG" alt=""></p><center>清澈的美感</center><p><img src="/images/trip-of-henan/DSC_3529.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3530.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3531.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3533.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3534.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3535.JPG" alt=""></p><center>emmm….皮影还是那么抽象</center><p><img src="/images/trip-of-henan/DSC_3539.JPG" alt=""></p><center>仿佛时光也在循环，延绵向前</center><p><img src="/images/trip-of-henan/DSC_3543.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3550.JPG" alt=""><br><img src="/images/trip-of-henan/DSC_3553.JPG" alt=""></p><center>这面墙，应该就是专门为了拍照立起来的吧</center><p><img src="/images/trip-of-henan/DSC_3554.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来应该是年前的一次出差记录，不过时间比较紧，被太多事情纠缠，到现在才想起来这些&lt;/p&gt;
&lt;p&gt;前前后后大概有整整1个月的跨度，从第一次出差，到一个月后，跨年，赶在公司年会前结束出差，还是有大概百张照片筛选&lt;/p&gt;
&lt;p&gt;嗯，算是到北方经历了一番～&lt;/p&gt;
&lt;p&gt;嗯，再也不吃烩面了。。。&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>30˚的天空</title>
    <link href="https://hellflame.github.io/2020/03/29/sky-of-thirty-degree/"/>
    <id>https://hellflame.github.io/2020/03/29/sky-of-thirty-degree/</id>
    <published>2020-03-29T04:23:01.000Z</published>
    <updated>2020-04-01T15:30:49.317Z</updated>
    
    <content type="html"><![CDATA[<p>额头略微上扬，视线稍微上抬</p><p>穿过众人的视线，不被人群遮挡</p><p>这不被察觉的片刻，便是30˚​的天空</p><p><br></p><p>云儿慵懒的飘过，静静享受早晨的阳光</p><p>人群匆忙的攒动，焦急地赶向目的地</p><p><br></p><p>在这V形的天空尽头，迎来下一个转角</p><p>等待人们的总是下一个选择</p><p>选择匆匆走过</p><p>还是慢慢品读</p><p><br></p><p>云儿似乎从未关心过路人的决定</p><p>径自飘向注定的远方</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;额头略微上扬，视线稍微上抬&lt;/p&gt;
&lt;p&gt;穿过众人的视线，不被人群遮挡&lt;/p&gt;
&lt;p&gt;这不被察觉的片刻，便是30˚​的天空&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;云儿慵懒的飘过，静静享受早晨的阳光&lt;/p&gt;
&lt;p&gt;人群匆忙的攒动，焦急地赶向目的地&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p
      
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>边界线</title>
    <link href="https://hellflame.github.io/2020/03/21/the-border-line/"/>
    <id>https://hellflame.github.io/2020/03/21/the-border-line/</id>
    <published>2020-03-21T15:23:23.000Z</published>
    <updated>2020-04-07T00:05:05.565Z</updated>
    
    <content type="html"><![CDATA[<p>他总有强大的敌人需要战胜</p><p>我却没办法假装站在和他同一战线</p><p>真实的我一直在遥远的边界线上</p><p>那个选择与未选择的边缘</p><p>那个对与错的中线</p><p>不属于任何一边</p><p><br></p><p>他觉得这边界线上只有飘忽不定，毫无归属感</p><p>而我却从来没有觉得遗憾</p><p>毕竟能同时欣赏两边</p><p>那份独一无二的风景线</p><p><br></p><p>毕竟</p><p>我想要的</p><p>从来都不在这一条边界线两边</p><p><br></p><p>终有一天</p><p>他走到了我曾经踽踽独行的边界线</p><p>看到从未见过的风景</p><p>想起了曾经也有这么一个人</p><p>发出了同样的感慨</p><p><br></p><p>不一样的是</p><p>他已不再孤单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;他总有强大的敌人需要战胜&lt;/p&gt;
&lt;p&gt;我却没办法假装站在和他同一战线&lt;/p&gt;
&lt;p&gt;真实的我一直在遥远的边界线上&lt;/p&gt;
&lt;p&gt;那个选择与未选择的边缘&lt;/p&gt;
&lt;p&gt;那个对与错的中线&lt;/p&gt;
&lt;p&gt;不属于任何一边&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;他觉得这边界线上只有
      
    
    </summary>
    
      <category term="thoughts" scheme="https://hellflame.github.io/categories/thoughts/"/>
    
    
  </entry>
  
  <entry>
    <title>重回武大</title>
    <link href="https://hellflame.github.io/2020/03/14/return-whu/"/>
    <id>https://hellflame.github.io/2020/03/14/return-whu/</id>
    <published>2020-03-14T15:17:21.000Z</published>
    <updated>2020-03-30T15:43:50.821Z</updated>
    
    <content type="html"><![CDATA[<p>在肺炎闹的很严重之前，无论如何还是回了一趟武大，难得没有什么游客，正好也有年假支持</p><p>具体拍摄时间应该是今年1月16日</p><a id="more"></a><center>太阳升起之前，鉴心湖前</center><p><img src="/images/return-whu/DSC_3572.JPG" alt=""><br><img src="/images/return-whu/DSC_3575.JPG" alt=""></p><center>梅操(露天影院，虽然一次也没去过看过就是了)</center><p><img src="/images/return-whu/DSC_3579.JPG" alt=""></p><center>行政楼</center><p><img src="/images/return-whu/DSC_3584.JPG" alt=""></p><center>法学院门前的喵星人</center><p><img src="/images/return-whu/DSC_3598.JPG" alt=""><br><img src="/images/return-whu/DSC_3600.JPG" alt=""></p><center>传说中的湖滨</center><p><img src="/images/return-whu/DSC_3602.JPG" alt=""><br><img src="/images/return-whu/DSC_3603.JPG" alt=""></p><center>东湖畔</center><p><img src="/images/return-whu/DSC_3616.JPG" alt=""><br><img src="/images/return-whu/DSC_3621.JPG" alt=""><br><img src="/images/return-whu/DSC_3633.JPG" alt=""><br><img src="/images/return-whu/DSC_3634.JPG" alt=""><br><img src="/images/return-whu/DSC_3636.JPG" alt=""><br><img src="/images/return-whu/DSC_3642.JPG" alt=""></p><center>信息学部图书饭(误)</center><p><img src="/images/return-whu/DSC_3650.JPG" alt=""></p><center>毕业之后才建起来的体育馆=.=</center><p><img src="/images/return-whu/DSC_3677.JPG" alt=""></p><center>梅花</center><p><img src="/images/return-whu/DSC_3683.JPG" alt=""><br><img src="/images/return-whu/DSC_3685.JPG" alt=""><br><img src="/images/return-whu/DSC_3689.JPG" alt=""></p><center>樱花城堡</center><p><img src="/images/return-whu/DSC_3692.JPG" alt=""></p><center>名场面</center><p><img src="/images/return-whu/DSC_3695.JPG" alt=""><br><img src="/images/return-whu/DSC_3697.JPG" alt=""><br><img src="/images/return-whu/DSC_3700.JPG" alt=""><br><img src="/images/return-whu/DSC_3703.JPG" alt=""></p><center>珞珈山上人迹罕至的建筑群</center><p><img src="/images/return-whu/DSC_3704.JPG" alt=""><br><img src="/images/return-whu/DSC_3708.JPG" alt=""><br><img src="/images/return-whu/DSC_3711.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在肺炎闹的很严重之前，无论如何还是回了一趟武大，难得没有什么游客，正好也有年假支持&lt;/p&gt;
&lt;p&gt;具体拍摄时间应该是今年1月16日&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
  <entry>
    <title>飘</title>
    <link href="https://hellflame.github.io/2020/02/05/vapor/"/>
    <id>https://hellflame.github.io/2020/02/05/vapor/</id>
    <published>2020-02-05T01:52:07.000Z</published>
    <updated>2020-02-05T02:29:24.129Z</updated>
    
    <content type="html"><![CDATA[<p>混沌初开，云雾缭绕</p><a id="more"></a><p>时间仿佛静止，但又从未停息</p><p><img src="/images/vapor/DSC_3805.JPG" alt=""><br><img src="/images/vapor/DSC_3980.JPG" alt=""><br><img src="/images/vapor/DSC_3981.JPG" alt=""><br><img src="/images/vapor/DSC_3983.JPG" alt=""><br><img src="/images/vapor/DSC_3982.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;混沌初开，云雾缭绕&lt;/p&gt;
    
    </summary>
    
      <category term="scenery" scheme="https://hellflame.github.io/categories/scenery/"/>
    
    
  </entry>
  
</feed>
